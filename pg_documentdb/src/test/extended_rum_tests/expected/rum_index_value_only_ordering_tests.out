SET search_path TO documentdb_api,documentdb_core,documentdb_api_catalog;
CREATE SCHEMA value_ordered_test_schema;
-- converts index term bytea to bson with flags
CREATE FUNCTION value_ordered_test_schema.gin_bson_index_term_to_bson(bytea) 
RETURNS bson
LANGUAGE c
AS '$libdir/pg_documentdb', 'gin_bson_index_term_to_bson';
-- debug function to read index pages
CREATE OR REPLACE FUNCTION value_ordered_test_schema.documentdb_rum_page_get_entries(page bytea, firstEntryType Oid)
RETURNS SETOF jsonb
LANGUAGE c
AS '$libdir/pg_documentdb_extended_rum_core', 'documentdb_rum_page_get_entries';
SET documentdb.next_collection_id TO 300;
SET documentdb.next_collection_index_id TO 300;
set documentdb.defaultUseCompositeOpClass to on;
SELECT documentdb_api_internal.create_indexes_non_concurrently(
    'comp_odb', '{ "createIndexes": "comp_value_ordering", "indexes": [ { "name": "path1_1", "key": { "path1": 1 } }, { "name": "path1_-1", "key": { "path1": -1 } } ] }', TRUE);
NOTICE:  creating collection
                                                                                                   create_indexes_non_concurrently                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

-- insert only even values
set documentdb.enableValueOnlyIndexTerms to off;
SELECT COUNT(documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, i, 'path1'::text, i * 2))) FROM generate_series(1, 10) i;
 count 
-------
    10
(1 row)

-- now set the GUC to on and insert only odd terms
set documentdb.enableValueOnlyIndexTerms to on;
SELECT COUNT(documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, i + 10, 'path1'::text, (i * 2) - 1))) FROM generate_series(1, 10) i;
 count 
-------
    10
(1 row)

-- now walk the index terms and assert that they're ordered correctly and every odd term is value only
SELECT entry->> 'offset',
    value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea)
        FROM value_ordered_test_schema.documentdb_rum_page_get_entries(public.get_raw_page('documentdb_data.documents_rum_index_302', 1), 'bytea'::regtype) entry;
 ?column? |                     gin_bson_index_term_to_bson                      
----------+----------------------------------------------------------------------
 1        | { "$" : { "$numberInt" : "1" }, "$flags" : { "$numberInt" : "5" } }
 2        | { "$" : { "$numberInt" : "2" }, "$flags" : { "$numberInt" : "0" } }
 3        | { "$" : { "$numberInt" : "3" }, "$flags" : { "$numberInt" : "5" } }
 4        | { "$" : { "$numberInt" : "4" }, "$flags" : { "$numberInt" : "0" } }
 5        | { "$" : { "$numberInt" : "5" }, "$flags" : { "$numberInt" : "5" } }
 6        | { "$" : { "$numberInt" : "6" }, "$flags" : { "$numberInt" : "0" } }
 7        | { "$" : { "$numberInt" : "7" }, "$flags" : { "$numberInt" : "5" } }
 8        | { "$" : { "$numberInt" : "8" }, "$flags" : { "$numberInt" : "0" } }
 9        | { "$" : { "$numberInt" : "9" }, "$flags" : { "$numberInt" : "5" } }
 10       | { "$" : { "$numberInt" : "10" }, "$flags" : { "$numberInt" : "0" } }
 11       | { "$" : { "$numberInt" : "11" }, "$flags" : { "$numberInt" : "5" } }
 12       | { "$" : { "$numberInt" : "12" }, "$flags" : { "$numberInt" : "0" } }
 13       | { "$" : { "$numberInt" : "13" }, "$flags" : { "$numberInt" : "5" } }
 14       | { "$" : { "$numberInt" : "14" }, "$flags" : { "$numberInt" : "0" } }
 15       | { "$" : { "$numberInt" : "15" }, "$flags" : { "$numberInt" : "5" } }
 16       | { "$" : { "$numberInt" : "16" }, "$flags" : { "$numberInt" : "0" } }
 17       | { "$" : { "$numberInt" : "17" }, "$flags" : { "$numberInt" : "5" } }
 18       | { "$" : { "$numberInt" : "18" }, "$flags" : { "$numberInt" : "0" } }
 19       | { "$" : { "$numberInt" : "19" }, "$flags" : { "$numberInt" : "5" } }
 20       | { "$" : { "$numberInt" : "20" }, "$flags" : { "$numberInt" : "0" } }
(20 rows)

SELECT entry->> 'offset',
    value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea)
        FROM value_ordered_test_schema.documentdb_rum_page_get_entries(public.get_raw_page('documentdb_data.documents_rum_index_303', 1), 'bytea'::regtype) entry;
 ?column? |                      gin_bson_index_term_to_bson                       
----------+------------------------------------------------------------------------
 1        | { "$" : { "$numberInt" : "20" }, "$flags" : { "$numberInt" : "128" } }
 2        | { "$" : { "$numberInt" : "19" }, "$flags" : { "$numberInt" : "133" } }
 3        | { "$" : { "$numberInt" : "18" }, "$flags" : { "$numberInt" : "128" } }
 4        | { "$" : { "$numberInt" : "17" }, "$flags" : { "$numberInt" : "133" } }
 5        | { "$" : { "$numberInt" : "16" }, "$flags" : { "$numberInt" : "128" } }
 6        | { "$" : { "$numberInt" : "15" }, "$flags" : { "$numberInt" : "133" } }
 7        | { "$" : { "$numberInt" : "14" }, "$flags" : { "$numberInt" : "128" } }
 8        | { "$" : { "$numberInt" : "13" }, "$flags" : { "$numberInt" : "133" } }
 9        | { "$" : { "$numberInt" : "12" }, "$flags" : { "$numberInt" : "128" } }
 10       | { "$" : { "$numberInt" : "11" }, "$flags" : { "$numberInt" : "133" } }
 11       | { "$" : { "$numberInt" : "10" }, "$flags" : { "$numberInt" : "128" } }
 12       | { "$" : { "$numberInt" : "9" }, "$flags" : { "$numberInt" : "133" } }
 13       | { "$" : { "$numberInt" : "8" }, "$flags" : { "$numberInt" : "128" } }
 14       | { "$" : { "$numberInt" : "7" }, "$flags" : { "$numberInt" : "133" } }
 15       | { "$" : { "$numberInt" : "6" }, "$flags" : { "$numberInt" : "128" } }
 16       | { "$" : { "$numberInt" : "5" }, "$flags" : { "$numberInt" : "133" } }
 17       | { "$" : { "$numberInt" : "4" }, "$flags" : { "$numberInt" : "128" } }
 18       | { "$" : { "$numberInt" : "3" }, "$flags" : { "$numberInt" : "133" } }
 19       | { "$" : { "$numberInt" : "2" }, "$flags" : { "$numberInt" : "128" } }
 20       | { "$" : { "$numberInt" : "1" }, "$flags" : { "$numberInt" : "133" } }
(20 rows)

-- note that the terms are co-comparable - adding even values again does not add new terms
set documentdb.enableValueOnlyIndexTerms to on;
SELECT COUNT(documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, i + 20, 'path1'::text, i * 2))) FROM generate_series(1, 10) i;
 count 
-------
    10
(1 row)

-- count should be 30
SELECT COUNT(*) FROM documentdb_api.collection('comp_odb', 'comp_value_ordering');
 count 
-------
    30
(1 row)

SELECT entry->> 'offset',
    value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea)
        FROM value_ordered_test_schema.documentdb_rum_page_get_entries(public.get_raw_page('documentdb_data.documents_rum_index_302', 1), 'bytea'::regtype) entry;
 ?column? |                     gin_bson_index_term_to_bson                      
----------+----------------------------------------------------------------------
 1        | { "$" : { "$numberInt" : "1" }, "$flags" : { "$numberInt" : "5" } }
 2        | { "$" : { "$numberInt" : "2" }, "$flags" : { "$numberInt" : "0" } }
 3        | { "$" : { "$numberInt" : "3" }, "$flags" : { "$numberInt" : "5" } }
 4        | { "$" : { "$numberInt" : "4" }, "$flags" : { "$numberInt" : "0" } }
 5        | { "$" : { "$numberInt" : "5" }, "$flags" : { "$numberInt" : "5" } }
 6        | { "$" : { "$numberInt" : "6" }, "$flags" : { "$numberInt" : "0" } }
 7        | { "$" : { "$numberInt" : "7" }, "$flags" : { "$numberInt" : "5" } }
 8        | { "$" : { "$numberInt" : "8" }, "$flags" : { "$numberInt" : "0" } }
 9        | { "$" : { "$numberInt" : "9" }, "$flags" : { "$numberInt" : "5" } }
 10       | { "$" : { "$numberInt" : "10" }, "$flags" : { "$numberInt" : "0" } }
 11       | { "$" : { "$numberInt" : "11" }, "$flags" : { "$numberInt" : "5" } }
 12       | { "$" : { "$numberInt" : "12" }, "$flags" : { "$numberInt" : "0" } }
 13       | { "$" : { "$numberInt" : "13" }, "$flags" : { "$numberInt" : "5" } }
 14       | { "$" : { "$numberInt" : "14" }, "$flags" : { "$numberInt" : "0" } }
 15       | { "$" : { "$numberInt" : "15" }, "$flags" : { "$numberInt" : "5" } }
 16       | { "$" : { "$numberInt" : "16" }, "$flags" : { "$numberInt" : "0" } }
 17       | { "$" : { "$numberInt" : "17" }, "$flags" : { "$numberInt" : "5" } }
 18       | { "$" : { "$numberInt" : "18" }, "$flags" : { "$numberInt" : "0" } }
 19       | { "$" : { "$numberInt" : "19" }, "$flags" : { "$numberInt" : "5" } }
 20       | { "$" : { "$numberInt" : "20" }, "$flags" : { "$numberInt" : "0" } }
(20 rows)

SELECT entry->> 'offset',
    value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea)
        FROM value_ordered_test_schema.documentdb_rum_page_get_entries(public.get_raw_page('documentdb_data.documents_rum_index_303', 1), 'bytea'::regtype) entry;
 ?column? |                      gin_bson_index_term_to_bson                       
----------+------------------------------------------------------------------------
 1        | { "$" : { "$numberInt" : "20" }, "$flags" : { "$numberInt" : "128" } }
 2        | { "$" : { "$numberInt" : "19" }, "$flags" : { "$numberInt" : "133" } }
 3        | { "$" : { "$numberInt" : "18" }, "$flags" : { "$numberInt" : "128" } }
 4        | { "$" : { "$numberInt" : "17" }, "$flags" : { "$numberInt" : "133" } }
 5        | { "$" : { "$numberInt" : "16" }, "$flags" : { "$numberInt" : "128" } }
 6        | { "$" : { "$numberInt" : "15" }, "$flags" : { "$numberInt" : "133" } }
 7        | { "$" : { "$numberInt" : "14" }, "$flags" : { "$numberInt" : "128" } }
 8        | { "$" : { "$numberInt" : "13" }, "$flags" : { "$numberInt" : "133" } }
 9        | { "$" : { "$numberInt" : "12" }, "$flags" : { "$numberInt" : "128" } }
 10       | { "$" : { "$numberInt" : "11" }, "$flags" : { "$numberInt" : "133" } }
 11       | { "$" : { "$numberInt" : "10" }, "$flags" : { "$numberInt" : "128" } }
 12       | { "$" : { "$numberInt" : "9" }, "$flags" : { "$numberInt" : "133" } }
 13       | { "$" : { "$numberInt" : "8" }, "$flags" : { "$numberInt" : "128" } }
 14       | { "$" : { "$numberInt" : "7" }, "$flags" : { "$numberInt" : "133" } }
 15       | { "$" : { "$numberInt" : "6" }, "$flags" : { "$numberInt" : "128" } }
 16       | { "$" : { "$numberInt" : "5" }, "$flags" : { "$numberInt" : "133" } }
 17       | { "$" : { "$numberInt" : "4" }, "$flags" : { "$numberInt" : "128" } }
 18       | { "$" : { "$numberInt" : "3" }, "$flags" : { "$numberInt" : "133" } }
 19       | { "$" : { "$numberInt" : "2" }, "$flags" : { "$numberInt" : "128" } }
 20       | { "$" : { "$numberInt" : "1" }, "$flags" : { "$numberInt" : "133" } }
(20 rows)

-- same is true when factoring in truncation.
TRUNCATE documentdb_data.documents_301;
-- insert with value only terms
set documentdb.enableValueOnlyIndexTerms to on;
SELECT documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, 'trunc1'::text, 'path1'::text, ('abcde' || repeat('z', 3000) || '1')::text));
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- insert with value off terms
set documentdb.enableValueOnlyIndexTerms to off;
SELECT documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, 'trunc2'::text, 'path1'::text, ('zyxwv' || repeat('z', 3000) || '1')::text));
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- now insert the other value with opposite flags
set documentdb.enableValueOnlyIndexTerms to off;
SELECT documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, 'trunc3'::text, 'path1'::text, ('abcde' || repeat('z', 3000) || '1')::text));
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- insert with value off terms
set documentdb.enableValueOnlyIndexTerms to on;
SELECT documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, 'trunc4'::text, 'path1'::text, ('zyxwv' || repeat('z', 3000) || '1')::text));
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- add non-truncated versions with that prefix with one with the flag and one not.
set documentdb.enableValueOnlyIndexTerms to off;
SELECT documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, 'trunc5'::text, 'path1'::text, ('abcde' || repeat('z', 10) || '1')::text));
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- insert with value off terms
set documentdb.enableValueOnlyIndexTerms to on;
SELECT documentdb_api.insert_one('comp_odb', 'comp_value_ordering', bson_build_document('_id'::text, 'trunc6'::text, 'path1'::text, ('zyxwv' || repeat('z', 10) || '1')::text));
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- count should be 6
SELECT COUNT(*) FROM documentdb_api.collection('comp_odb', 'comp_value_ordering');
 count 
-------
     6
(1 row)

-- should have only 2 index terms with the truncation flags on (one value only, the other one not) and the lengths should match, and non-truncated sort before truncated
SELECT entry->> 'offset',
    value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea) ->> '$flags',
    length(value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea)::bytea),
    SUBSTRING(value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea) ->> '$', 0, 15)
        FROM value_ordered_test_schema.documentdb_rum_page_get_entries(public.get_raw_page('documentdb_data.documents_rum_index_302', 1), 'bytea'::regtype) entry;
 ?column? | ?column? | length |   substring    
----------+----------+--------+----------------
 1        | 1        |     19 | 
 2        | 0        |     41 | abcdezzzzzzzzz
 3        | 6        |   2699 | abcdezzzzzzzzz
 4        | 5        |     41 | zyxwvzzzzzzzzz
 5        | 1        |   2699 | zyxwvzzzzzzzzz
(5 rows)

SELECT entry->> 'offset',
    value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea) ->> '$flags',
    length(value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea)::bytea),
    SUBSTRING(value_ordered_test_schema.gin_bson_index_term_to_bson((entry->>'firstEntry')::bytea) ->> '$', 0, 15)
        FROM value_ordered_test_schema.documentdb_rum_page_get_entries(public.get_raw_page('documentdb_data.documents_rum_index_303', 1), 'bytea'::regtype) entry;
 ?column? | ?column? | length |   substring    
----------+----------+--------+----------------
 1        | 1        |     19 | 
 2        | 129      |   2699 | zyxwvzzzzzzzzz
 3        | 133      |     41 | zyxwvzzzzzzzzz
 4        | 134      |   2699 | abcdezzzzzzzzz
 5        | 128      |     41 | abcdezzzzzzzzz
(5 rows)


name: DocumentDB gateway tests
run-name: ${{ github.event.pull_request.title || '' }}
concurrency:
  group: gateway-tests-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths:
      - "pg_documentdb_gw/**"
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    paths-ignore:
      - "docs/**"
      - ".devcontainer/**"
      - "*.md"

jobs:
  test-run-in-Ubuntu:
    runs-on: ${{ matrix.runner }}
    name: Run gateway tests on ${{ matrix.runner }} with pg ${{ matrix.pg_version }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        pg_version:
          - 15
          - 16
          - 17
        arch:
          - amd64
          - arm64
        include:
          - arch: amd64
            runner: ubuntu-22.04
          - arch: arm64
            runner: ubuntu-22.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install package dependencies
        run: |
          export PG_VERSION=${{ matrix.pg_version }}
          export CITUS_VERSION=12

          export LC_ALL=en_US.UTF-8
          export LANGUAGE=en_US
          export LC_COLLATE=en_US.UTF-8
          export LC_CTYPE=en_US.UTF-8

          # Import the repository signing key:
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
          wget \
          curl \
          sudo \
          gnupg2 \
          lsb-release \
          tzdata \
          build-essential \
          pkg-config \
          cmake \
          git \
          locales \
          gcc \
          gdb \
          libipc-run-perl \
          unzip \
          apt-transport-https \
          bison \
          flex \
          libreadline-dev \
          zlib1g-dev \
          libkrb5-dev \
          software-properties-common \
          libtool \
          libicu-dev \
          libssl-dev \
          openssl

          export CLEAN_SETUP=1
          export INSTALL_DEPENDENCIES_ROOT=/tmp/install_setup
          mkdir -p /tmp/install_setup

          # Install dependencies
          cp ./scripts/setup_versions.sh /tmp/install_setup

          cp ./scripts/install_setup_libbson.sh /tmp/install_setup
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT MAKE_PROGRAM=cmake /tmp/install_setup/install_setup_libbson.sh
          cp ./scripts/utils.sh /tmp/install_setup
          cp ./scripts/install_setup_postgres.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT /tmp/install_setup/install_setup_postgres.sh -d /usr/lib/postgresql/${PG_VERSION} $POSTGRES_INSTALL_ARG -v ${PG_VERSION}
          cp ./scripts/install_setup_rum_oss.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT PGVERSION=$PG_VERSION /tmp/install_setup/install_setup_rum_oss.sh
          cp ./scripts/install_setup_citus_core_oss.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT PGVERSION=$PG_VERSION /tmp/install_setup/install_setup_citus_core_oss.sh ${CITUS_VERSION}
          cp ./scripts/install_citus_indent.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT /tmp/install_setup/install_citus_indent.sh
          cp ./scripts/install_setup_contrib_extensions_core.sh /tmp/install_setup/
          cp ./scripts/install_setup_contrib_extensions.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT PGVERSION=$PG_VERSION /tmp/install_setup/install_setup_contrib_extensions.sh
          cp ./scripts/install_setup_pg_cron.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT PGVERSION=$PG_VERSION /tmp/install_setup/install_setup_pg_cron.sh
          cp ./scripts/install_setup_intel_decimal_math_lib.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT /tmp/install_setup/install_setup_intel_decimal_math_lib.sh
          cp ./scripts/install_setup_pcre2.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT /tmp/install_setup/install_setup_pcre2.sh
          cp ./scripts/install_setup_pgvector.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT PGVERSION=$PG_VERSION /tmp/install_setup/install_setup_pgvector.sh

          sudo apt-get update
          sudo apt-get install -qy \
          libproj-dev \
          libxml2-dev \
          libjson-c-dev \
          libgdal-dev \
          libgeos++-dev \
          libgeos-dev \

          cp ./scripts/install_setup_postgis.sh /tmp/install_setup/
          sudo INSTALL_DEPENDENCIES_ROOT=$INSTALL_DEPENDENCIES_ROOT PGVERSION=$PG_VERSION /tmp/install_setup/install_setup_postgis.sh

      - name: Install Rust
        run: |
          export CARGO_HOME=$HOME/.cargo
          export RUSTUP_HOME=$HOME/.rustup

          ./scripts/install_rustup.sh --install-toolchain
          rustc --version && cargo --version

      - name: Export pg_config PATH
        run: |
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Configure, Build and Install DocumentDB
        run: |
          which pg_config
          make
          sudo PATH=$PATH make install

      - name: Build and Install Gateway host
        run: scripts/build_and_install_with_pgrx.sh -v ${{ matrix.pg_version }} -d ./pg_documentdb_gw_host

      - name: Check Gateway formatting and lints
        run: |
          cargo fmt --all --check
          cargo clippy --all-targets --all-features -- -D warnings
        working-directory: pg_documentdb_gw

      - name: Check Gateway host formatting and lints
        run: |
          cargo fmt --all --check
          cargo clippy --all-targets --no-default-features --features "pg${{ matrix.pg_version }}" -- -D warnings
        working-directory: pg_documentdb_gw_host

      - name: Start DocumentDB service
        run: |
          export PG_VERSION_USED=${{ matrix.pg_version }}
          mkdir -p $RUNNER_TEMP/pgdata
          ./scripts/start_oss_server.sh -d $RUNNER_TEMP/pgdata -c -r
          cat $RUNNER_TEMP/pgdata/pglog.log

      - name: Run Gateway Tests
        run: |
          cargo test -- --test-threads=1
        working-directory: pg_documentdb_gw

      - name: Upload Log Files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs_${{ matrix.runner }}_PG${{ matrix.pg_version }}
          overwrite: true
          path: "**/*.log"

SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SET citus.next_shard_id TO 1064000;
SET documentdb.next_collection_id TO 10640;
SET documentdb.next_collection_index_id TO 10640;
set enable_seqscan TO on;
set documentdb.forceUseIndexIfAvailable to on;
set documentdb.forceDisableSeqScan to off;
SELECT documentdb_api.drop_collection('comp_elmdb', 'cmp_elemmatch_ops') IS NOT NULL;
 ?column? 
---------------------------------------------------------------------
 t
(1 row)

SELECT documentdb_api.create_collection('comp_elmdb', 'cmp_elemmatch_ops') IS NOT NULL;
NOTICE:  creating collection
 ?column? 
---------------------------------------------------------------------
 t
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_elmdb',
    '{ "createIndexes": "cmp_elemmatch_ops", "indexes": [ { "key": { "price": 1 }, "name": "price_1", "enableCompositeTerm": true }, { "key": { "brands": 1 }, "name": "brands_1", "enableCompositeTerm": true } ] }', TRUE);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "3" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_elmdb',
    '{ "createIndexes": "cmp_elemmatch_ops", "indexes": [ { "key": { "brands.name": 1 }, "name": "brands.name_1", "enableCompositeTerm": true }, { "key": { "brands.rating": 1 }, "name": "brands.rating_1", "enableCompositeTerm": true } ] }', TRUE);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "3" }, "numIndexesAfter" : { "$numberInt" : "5" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api.insert_one('comp_elmdb', 'cmp_elemmatch_ops', '{ "_id": 1, "price": [ 120, 150, 100 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('comp_elmdb', 'cmp_elemmatch_ops', '{ "_id": 2, "price": [ 110, 140, 160 ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- pushes to the price index
set documentdb.enableExtendedExplainPlans to on;
EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$elemMatch": { "$gt": 120, "$lt": 150 } } } }');
                                                                                                                                     QUERY PLAN                                                                                                                                     
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=1 loops=1)
   indexName: price_1
   isMultiKey: true
   indexBounds: ["price": (120, 150)]
   innerScanLoops: 1 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 1)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
         Filter: (document @#? '{ "price" : { "$gt" : { "$numberInt" : "120" }, "$lt" : { "$numberInt" : "150" } } }'::bson)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on price_1 (actual rows=1 loops=1)
               Index Cond: (document @<> '{ "price" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "2" }, "value" : { "$numberInt" : "120" }, "isTopLevel" : true }, { "op" : { "$numberInt" : "4" }, "value" : { "$numberInt" : "150" }, "isTopLevel" : true } ] } }'::bson)
(12 rows)

-- without the GUC becomes a disjoint index filter
set documentdb.useNewElemMatchIndexOperatorOnPushdown to off;
EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$elemMatch": { "$gt": 120, "$lt": 150 } } } }');
                                                                        QUERY PLAN                                                                         
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=1 loops=1)
   indexName: price_1
   isMultiKey: true
   indexBounds: ["price": (120, Infinity]], ["price": [-Infinity, 150)]
   innerScanLoops: 2 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 3), (isInequality: true, estimatedEntryCount: 4)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
         Filter: (document @#? '{ "price" : { "$gt" : { "$numberInt" : "120" }, "$lt" : { "$numberInt" : "150" } } }'::bson)
         Rows Removed by Filter: 1
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on price_1 (actual rows=2 loops=1)
               Index Cond: ((document @> '{ "price" : { "$numberInt" : "120" } }'::bson) AND (document @< '{ "price" : { "$numberInt" : "150" } }'::bson))
(13 rows)

reset documentdb.useNewElemMatchIndexOperatorOnPushdown;
EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$elemMatch": { "$in": [ 120, 140 ], "$gt": 121 } } } }');
                                                                                                                                                    QUERY PLAN                                                                                                                                                    
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=1 loops=1)
   indexName: price_1
   isMultiKey: true
   indexBounds: ["price": (121, 120]], ["price": [140, 140]]
   innerScanLoops: 1 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 0), (isInequality: false, estimatedEntryCount: 1)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
         Filter: (document @#? '{ "price" : { "$in" : [ { "$numberInt" : "120" }, { "$numberInt" : "140" } ], "$gt" : { "$numberInt" : "121" } } }'::bson)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on price_1 (actual rows=1 loops=1)
               Index Cond: (document @<> '{ "price" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "6" }, "value" : [ { "$numberInt" : "120" }, { "$numberInt" : "140" } ], "isTopLevel" : true }, { "op" : { "$numberInt" : "2" }, "value" : { "$numberInt" : "121" }, "isTopLevel" : true } ] } }'::bson)
(12 rows)

EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$elemMatch": { "$type": "number" } } } }');
                                                                               QUERY PLAN                                                                                
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=2 loops=1)
   indexName: price_1
   isMultiKey: true
   indexBounds: ["price": [-Infinity, Infinity]]
   innerScanLoops: 2 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 6)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=2 loops=1)
         Filter: (document @#? '{ "price" : { "$type" : "number" } }'::bson)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on price_1 (actual rows=2 loops=1)
               Index Cond: (document @<> '{ "price" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "12" }, "value" : "number", "isTopLevel" : true } ] } }'::bson)
(12 rows)

EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$elemMatch": { "$ne": 160 } } } }');
                                     QUERY PLAN                                      
---------------------------------------------------------------------
 Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=2 loops=1)
   Recheck Cond: (shard_key_value = '10641'::bigint)
   Filter: (document @#? '{ "price" : { "$ne" : { "$numberInt" : "160" } } }'::bson)
   Heap Blocks: exact=1
   ->  Bitmap Index Scan on _id_ (actual rows=2 loops=1)
         Index Cond: (shard_key_value = '10641'::bigint)
(6 rows)

EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$elemMatch": { "$nin": [ 160, 110, 140] } } } }');
                                                                  QUERY PLAN                                                                  
---------------------------------------------------------------------
 Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
   Recheck Cond: (shard_key_value = '10641'::bigint)
   Filter: (document @#? '{ "price" : { "$nin" : [ { "$numberInt" : "160" }, { "$numberInt" : "110" }, { "$numberInt" : "140" } ] } }'::bson)
   Rows Removed by Filter: 1
   Heap Blocks: exact=1
   ->  Bitmap Index Scan on _id_ (actual rows=2 loops=1)
         Index Cond: (shard_key_value = '10641'::bigint)
(7 rows)

-- now test some with nested objects
SELECT documentdb_api.insert_one('comp_elmdb', 'cmp_elemmatch_ops', '{ "_id": 3, "brands": [ { "name" : "alpha", "rating" : 5 }, { "name" : "beta", "rating" : 3 } ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('comp_elmdb', 'cmp_elemmatch_ops', '{ "_id": 4, "brands": [ { "name" : "alpha", "rating" : 4 }, { "name" : "beta", "rating" : 2 } ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('comp_elmdb', 'cmp_elemmatch_ops', '{ "_id": 5, "brands": [ { "name" : "alpha", "rating" : 2 }, { "name" : "beta", "rating" : 4 } ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "brands": { "$elemMatch": { "name": "alpha", "rating": 2 } } } }');
                                                                                          QUERY PLAN                                                                                           
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=1 loops=1)
   indexName: brands.rating_1
   isMultiKey: true
   indexBounds: ["brands.rating": [2, 2]]
   innerScanLoops: 2 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: false, estimatedEntryCount: 2)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
         Filter: (document @#? '{ "brands" : { "name" : "alpha", "rating" : { "$numberInt" : "2" } } }'::bson)
         Rows Removed by Filter: 1
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on "brands.rating_1" (actual rows=2 loops=1)
               Index Cond: (document @<> '{ "brands.rating" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "1" }, "value" : { "$numberInt" : "2" }, "isTopLevel" : false } ] } }'::bson)
(13 rows)

EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "brands": { "$elemMatch": { "name": "alpha" } } } }');
                                                                                  QUERY PLAN                                                                                  
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=3 loops=1)
   indexName: brands.name_1
   isMultiKey: true
   indexBounds: ["brands.name": ["alpha", "alpha"]]
   innerScanLoops: 3 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: false, estimatedEntryCount: 3)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=3 loops=1)
         Filter: (document @#? '{ "brands" : { "name" : "alpha" } }'::bson)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on "brands.name_1" (actual rows=3 loops=1)
               Index Cond: (document @<> '{ "brands.name" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "1" }, "value" : "alpha", "isTopLevel" : false } ] } }'::bson)
(12 rows)

-- test elemMatch behavior when confronted with multiple arrays
SELECT documentdb_api.insert_one('comp_elmdb', 'cmp_elemmatch_ops', '{ "_id": 6, "brands": [ { "name": [ "gurci", "dolte" ], "rating": 5 } ]}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- this technically matches the doc 6 above and the elemMatches don't get joined.
EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "brands": { "$elemMatch": { "name": { "$gt": "gabba", "$lt": "ergo" } } } } }');
                                                                                                                       QUERY PLAN                                                                                                                        
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=1 loops=1)
   indexName: brands.name_1
   isMultiKey: true
   indexBounds: ["brands.name": ("gabba", { })], ["brands.name": ["", "ergo")]
   innerScanLoops: 4 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 1), (isInequality: true, estimatedEntryCount: 7)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
         Filter: (document @#? '{ "brands" : { "name" : { "$gt" : "gabba", "$lt" : "ergo" } } }'::bson)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on "brands.name_1" (actual rows=1 loops=1)
               Index Cond: (document @<> '{ "brands.name" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "2" }, "value" : "gabba", "isTopLevel" : false }, { "op" : { "$numberInt" : "4" }, "value" : "ergo", "isTopLevel" : false } ] } }'::bson)
(12 rows)

-- this can now join the elemMatch filters
EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "brands.name": { "$elemMatch": { "$gt": "gabba", "$lt": "ergo" } } } }');
                                                                                                                      QUERY PLAN                                                                                                                       
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=0 loops=1)
   indexName: brands.name_1
   isMultiKey: true
   indexBounds: ["brands.name": ("gabba", "ergo")]
   innerScanLoops: 0 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 0)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=0 loops=1)
         Filter: (document @#? '{ "brands.name" : { "$gt" : "gabba", "$lt" : "ergo" } }'::bson)
         ->  Bitmap Index Scan on "brands.name_1" (actual rows=0 loops=1)
               Index Cond: (document @<> '{ "brands.name" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "2" }, "value" : "gabba", "isTopLevel" : true }, { "op" : { "$numberInt" : "4" }, "value" : "ergo", "isTopLevel" : true } ] } }'::bson)
(11 rows)

-- disjoint filter handling for elemMatch and non elemMatch: this matches a document since these are matching different elements of the array.
EXPLAIN (COSTS OFF, ANALYZE ON, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_elmdb',
    '{ "find": "cmp_elemmatch_ops", "filter": { "price": { "$eq": 110, "$elemMatch": { "$gt": 155, "$lt": 165 } } } }');
                                                                                                                                                                      QUERY PLAN                                                                                                                                                                       
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=1 loops=1)
   indexName: price_1
   isMultiKey: true
   indexBounds: ["price": [110, 110]], ["price": (155, 165)]
   innerScanLoops: 1 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: false, estimatedEntryCount: 1), (isInequality: true, estimatedEntryCount: 1)]
   ->  Bitmap Heap Scan on documents_10641_1064002 collection (actual rows=1 loops=1)
         Recheck Cond: (document @= '{ "price" : { "$numberInt" : "110" } }'::bson)
         Filter: (document @#? '{ "price" : { "$gt" : { "$numberInt" : "155" }, "$lt" : { "$numberInt" : "165" } } }'::bson)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on price_1 (actual rows=1 loops=1)
               Index Cond: ((document @= '{ "price" : { "$numberInt" : "110" } }'::bson) AND (document @<> '{ "price" : { "elemMatchIndexOp" : [ { "op" : { "$numberInt" : "2" }, "value" : { "$numberInt" : "155" }, "isTopLevel" : true }, { "op" : { "$numberInt" : "4" }, "value" : { "$numberInt" : "165" }, "isTopLevel" : true } ] } }'::bson))
(13 rows)

